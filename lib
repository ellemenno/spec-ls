#!/usr/bin/env ruby
# encoding: utf-8

require 'fileutils'
require 'json'

@build_flag = false
@run_flag = false


def usage(s='')
	$stderr.puts(s)
	$stderr.puts("Usage: #{File.basename($0)}: [-h | --help] [-b | --build] [-r | --run]")
	exit(2)
end

def exec_with_echo(cmd)
	puts(cmd)
	stdout = %x[#{cmd}]
	puts(stdout) unless stdout.empty?
	$?.exitstatus
end

def parse_opts
	usage("No option specified") if ARGV.length == 0

	loop {
		case ARGV[0]
			when '-h', '--help'
				usage()
			when '-b', '--build'
				ARGV.shift
				@build_flag = true
			when '-r', '--run'
				ARGV.shift
				@run_flag = true
			when /^-/
				usage("Unknown option: #{ARGV[0].inspect}")
			else
				break
		end
	}
end


def sdk_name
	config = JSON.parse(File.read('loom.config'))
	config['sdk_version']
end

def app_name
	config = JSON.parse(File.read('loom.config'))
	config['executable']
end

def libs
	Dir.entries("./libs").select { |f|
		!File.directory?(f) and (File.extname(f) == '.loomlib')
	}
end


def compile(sdk, config_array)
	config_array.each do | config |
		cmd = %Q[~/.loom/sdks/#{sdk}/tools/lsc #{config}]
		abort("◈ compile failed") if (exec_with_echo(cmd) != 0)
	end
end

def execute(sdk, binary)
	cmd = %Q[~/.loom/sdks/#{sdk}/tools/loomexec #{binary}]
	abort("◈ execute failed") if (exec_with_echo(cmd) != 0)
end

def install_libs(sdk, libs_array)
	libs_array.each do | lib |
		cmd = %Q[cp ./libs/#{lib} ~/.loom/sdks/#{sdk}/libs]
		abort("◈ lib install failed") if (exec_with_echo(cmd) != 0)
	end
end


def build
	sdk = sdk_name

	puts('')
	puts('...build libs')
	compile(sdk, ['lib-spec.build'])

	puts('')
	puts('...install libs')
	install_libs(sdk, libs)

	puts('')
	puts('...build app')
	compile(sdk, ['test-spec.build'])
end

def release
	sdk = sdk_name
	ext = '.loomlib'
	release_dir = "releases"

	Dir.mkdir(release_dir) unless File.exists?(release_dir)

	puts('')
	puts('...release libs')
	libs.each do | lib |
		lib_release = %Q[#{File.basename(lib, ext)}-#{sdk}#{ext}]
		puts lib_release
		FileUtils.copy("./libs/#{lib}", "#{release_dir}/#{lib_release}")
	end
end

def run
	puts('')
	puts('...run app')
	execute(sdk_name, "bin/#{app_name}")
end

def done
	puts('')
	puts("...done")
	puts('')
end


parse_opts()

build() if @build_flag
release() if @build_flag
run() if @run_flag

done()
exit
